apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: multi-stage-deploy-
spec:
  entrypoint: deploy-pipeline
  serviceAccountName: argo-workflow
  arguments:
    parameters:
    - name: repo-url
      value: "https://github.com/your-username/vote-app.git"
    - name: branch
      value: "main"
    - name: image
      value: "your-docker-repo/vote"
    - name: dockerfile
      value: "Dockerfile"
  volumeClaimTemplates:
  - metadata:
      name: workspace
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 100Mi

  volumes:
  - name: docker-config
    secret:
      secretName: docker-registry-creds
      items:
        - key: .dockerconfigjson
          path: config.json

  templates:
  - name: deploy-pipeline
    steps:
    - - name: clone
        template: clone
    - - name: build
        template: build
    - - name: test
        template: test
    - - name: deploy-to-stage
        template: deploy
        arguments:
          parameters:
          - name: environment
            value: "staging"
    - - name: manual-approval
        template: manual-approval
    - - name: deploy-to-prod
        template: deploy
        arguments:
          parameters:
          - name: environment
            value: "production"

  - name: clone
    script:
      image: alpine/git
      command: [sh]
      source: |
        #!/bin/sh
        git clone --branch {{inputs.parameters.branch}} {{inputs.parameters.repo-url}} /workspace
        cd /workspace
        COMMIT_SHA=$(git rev-parse --short HEAD)
        echo $COMMIT_SHA > /workspace/commit-sha.txt
      volumeMounts:
      - name: workspace
        mountPath: /workspace
    outputs:
      parameters:
      - name: commit-sha
        valueFrom:
          path: /workspace/commit-sha.txt

  - name: build
    script:
      image: python:3.9
      command: ["sh"]
      source: |
        #!/bin/sh
        cd /workspace
        pip install -r requirements.txt
      volumeMounts:
      - name: workspace
        mountPath: /workspace

  - name: test
    script:
      image: python:3.9
      command: ["sh"]
      source: |
        #!/bin/sh
        cd /workspace
        pip install nose
        nosetests
      volumeMounts:
      - name: workspace
        mountPath: /workspace

  - name: deploy
    inputs:
      parameters:
      - name: environment
    container:
      image: gcr.io/kaniko-project/executor:latest
      command: ["/kaniko/executor"]
      args:
      - --dockerfile=/workspace/{{inputs.parameters.dockerfile}}
      - --context=/workspace
      - --destination={{inputs.parameters.image}}:{{inputs.parameters.environment}}
      - --force
      volumeMounts:
      - name: workspace
        mountPath: /workspace
      - name: docker-config
        mountPath: /kaniko/.docker
      env:
      - name: DOCKER_CONFIG
        value: /kaniko/.docker

  - name: manual-approval
    inputs: {}
    script:
      image: argoproj/argoexec:latest
      command: [sh]
      source: |
        #!/bin/sh
        echo "Waiting for manual approval to promote to production..."
        sleep 30  # Here you can replace this with an actual approval mechanism if needed
        echo "Approved! Proceeding to production deploy."
